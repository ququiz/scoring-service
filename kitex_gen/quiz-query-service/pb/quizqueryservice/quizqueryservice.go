// Code generated by Kitex v0.9.1. DO NOT EDIT.

package quizqueryservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	pb "ququiz/lintang/scoring-service/kitex_gen/quiz-query-service/pb"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetQuestionDetail": kitex.NewMethodInfo(
		getQuestionDetailHandler,
		newGetQuestionDetailArgs,
		newGetQuestionDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetQuizParticipants": kitex.NewMethodInfo(
		getQuizParticipantsHandler,
		newGetQuizParticipantsArgs,
		newGetQuizParticipantsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	quizQueryServiceServiceInfo                = NewServiceInfo()
	quizQueryServiceServiceInfoForClient       = NewServiceInfoForClient()
	quizQueryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return quizQueryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return quizQueryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return quizQueryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "QuizQueryService"
	handlerType := (*pb.QuizQueryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "ququiz.lintang.quiz_query.pc",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func getQuestionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(pb.GetQuestionReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(pb.QuizQueryService).GetQuestionDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetQuestionDetailArgs:
		success, err := handler.(pb.QuizQueryService).GetQuestionDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetQuestionDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetQuestionDetailArgs() interface{} {
	return &GetQuestionDetailArgs{}
}

func newGetQuestionDetailResult() interface{} {
	return &GetQuestionDetailResult{}
}

type GetQuestionDetailArgs struct {
	Req *pb.GetQuestionReq
}

func (p *GetQuestionDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(pb.GetQuestionReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetQuestionDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetQuestionDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetQuestionDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetQuestionDetailArgs) Unmarshal(in []byte) error {
	msg := new(pb.GetQuestionReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetQuestionDetailArgs_Req_DEFAULT *pb.GetQuestionReq

func (p *GetQuestionDetailArgs) GetReq() *pb.GetQuestionReq {
	if !p.IsSetReq() {
		return GetQuestionDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetQuestionDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetQuestionDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetQuestionDetailResult struct {
	Success *pb.GetQuestionRes
}

var GetQuestionDetailResult_Success_DEFAULT *pb.GetQuestionRes

func (p *GetQuestionDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(pb.GetQuestionRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetQuestionDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetQuestionDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetQuestionDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetQuestionDetailResult) Unmarshal(in []byte) error {
	msg := new(pb.GetQuestionRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetQuestionDetailResult) GetSuccess() *pb.GetQuestionRes {
	if !p.IsSetSuccess() {
		return GetQuestionDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetQuestionDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*pb.GetQuestionRes)
}

func (p *GetQuestionDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetQuestionDetailResult) GetResult() interface{} {
	return p.Success
}

func getQuizParticipantsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(pb.GetQuizParticipantsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(pb.QuizQueryService).GetQuizParticipants(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetQuizParticipantsArgs:
		success, err := handler.(pb.QuizQueryService).GetQuizParticipants(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetQuizParticipantsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetQuizParticipantsArgs() interface{} {
	return &GetQuizParticipantsArgs{}
}

func newGetQuizParticipantsResult() interface{} {
	return &GetQuizParticipantsResult{}
}

type GetQuizParticipantsArgs struct {
	Req *pb.GetQuizParticipantsReq
}

func (p *GetQuizParticipantsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(pb.GetQuizParticipantsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetQuizParticipantsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetQuizParticipantsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetQuizParticipantsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetQuizParticipantsArgs) Unmarshal(in []byte) error {
	msg := new(pb.GetQuizParticipantsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetQuizParticipantsArgs_Req_DEFAULT *pb.GetQuizParticipantsReq

func (p *GetQuizParticipantsArgs) GetReq() *pb.GetQuizParticipantsReq {
	if !p.IsSetReq() {
		return GetQuizParticipantsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetQuizParticipantsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetQuizParticipantsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetQuizParticipantsResult struct {
	Success *pb.GetQuizParticipantRes
}

var GetQuizParticipantsResult_Success_DEFAULT *pb.GetQuizParticipantRes

func (p *GetQuizParticipantsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(pb.GetQuizParticipantRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetQuizParticipantsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetQuizParticipantsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetQuizParticipantsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetQuizParticipantsResult) Unmarshal(in []byte) error {
	msg := new(pb.GetQuizParticipantRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetQuizParticipantsResult) GetSuccess() *pb.GetQuizParticipantRes {
	if !p.IsSetSuccess() {
		return GetQuizParticipantsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetQuizParticipantsResult) SetSuccess(x interface{}) {
	p.Success = x.(*pb.GetQuizParticipantRes)
}

func (p *GetQuizParticipantsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetQuizParticipantsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetQuestionDetail(ctx context.Context, Req *pb.GetQuestionReq) (r *pb.GetQuestionRes, err error) {
	var _args GetQuestionDetailArgs
	_args.Req = Req
	var _result GetQuestionDetailResult
	if err = p.c.Call(ctx, "GetQuestionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetQuizParticipants(ctx context.Context, Req *pb.GetQuizParticipantsReq) (r *pb.GetQuizParticipantRes, err error) {
	var _args GetQuizParticipantsArgs
	_args.Req = Req
	var _result GetQuizParticipantsResult
	if err = p.c.Call(ctx, "GetQuizParticipants", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
