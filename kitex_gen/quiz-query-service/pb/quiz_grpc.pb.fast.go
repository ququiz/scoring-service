// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package pb

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GetQuestionReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetQuestionReq[number], err)
}

func (x *GetQuestionReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.QuestionId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetQuestionReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.QuizId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetQuestionRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetQuestionRes[number], err)
}

func (x *GetQuestionRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CorrectChoiceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetQuestionRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CorrectEssayAnswerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetQuestionRes) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Weight, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *GetQuizParticipantsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetQuizParticipantsReq[number], err)
}

func (x *GetQuizParticipantsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.QuizId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetQuizParticipantRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetQuizParticipantRes[number], err)
}

func (x *GetQuizParticipantRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserIds = append(x.UserIds, v)
	return offset, err
}

func (x *GetQuizParticipantRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.QuizName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetQuestionReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetQuestionReq) fastWriteField1(buf []byte) (offset int) {
	if x.QuestionId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetQuestionId())
	return offset
}

func (x *GetQuestionReq) fastWriteField2(buf []byte) (offset int) {
	if x.QuizId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetQuizId())
	return offset
}

func (x *GetQuestionRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetQuestionRes) fastWriteField1(buf []byte) (offset int) {
	if x.CorrectChoiceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCorrectChoiceId())
	return offset
}

func (x *GetQuestionRes) fastWriteField2(buf []byte) (offset int) {
	if x.CorrectEssayAnswerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCorrectEssayAnswerId())
	return offset
}

func (x *GetQuestionRes) fastWriteField3(buf []byte) (offset int) {
	if x.Weight == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetWeight())
	return offset
}

func (x *GetQuizParticipantsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetQuizParticipantsReq) fastWriteField1(buf []byte) (offset int) {
	if x.QuizId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetQuizId())
	return offset
}

func (x *GetQuizParticipantRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetQuizParticipantRes) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserIds) == 0 {
		return offset
	}
	for i := range x.GetUserIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserIds()[i])
	}
	return offset
}

func (x *GetQuizParticipantRes) fastWriteField2(buf []byte) (offset int) {
	if x.QuizName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetQuizName())
	return offset
}

func (x *GetQuestionReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetQuestionReq) sizeField1() (n int) {
	if x.QuestionId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetQuestionId())
	return n
}

func (x *GetQuestionReq) sizeField2() (n int) {
	if x.QuizId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetQuizId())
	return n
}

func (x *GetQuestionRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetQuestionRes) sizeField1() (n int) {
	if x.CorrectChoiceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCorrectChoiceId())
	return n
}

func (x *GetQuestionRes) sizeField2() (n int) {
	if x.CorrectEssayAnswerId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCorrectEssayAnswerId())
	return n
}

func (x *GetQuestionRes) sizeField3() (n int) {
	if x.Weight == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetWeight())
	return n
}

func (x *GetQuizParticipantsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetQuizParticipantsReq) sizeField1() (n int) {
	if x.QuizId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetQuizId())
	return n
}

func (x *GetQuizParticipantRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetQuizParticipantRes) sizeField1() (n int) {
	if len(x.UserIds) == 0 {
		return n
	}
	for i := range x.GetUserIds() {
		n += fastpb.SizeString(1, x.GetUserIds()[i])
	}
	return n
}

func (x *GetQuizParticipantRes) sizeField2() (n int) {
	if x.QuizName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetQuizName())
	return n
}

var fieldIDToName_GetQuestionReq = map[int32]string{
	1: "QuestionId",
	2: "QuizId",
}

var fieldIDToName_GetQuestionRes = map[int32]string{
	1: "CorrectChoiceId",
	2: "CorrectEssayAnswerId",
	3: "Weight",
}

var fieldIDToName_GetQuizParticipantsReq = map[int32]string{
	1: "QuizId",
}

var fieldIDToName_GetQuizParticipantRes = map[int32]string{
	1: "UserIds",
	2: "QuizName",
}
