// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: quiz_grpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuizQueryServiceClient is the client API for QuizQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizQueryServiceClient interface {
	GetQuestionDetail(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*GetQuestionRes, error)
	GetQuizParticipants(ctx context.Context, in *GetQuizParticipantsReq, opts ...grpc.CallOption) (*GetQuizParticipantRes, error)
}

type quizQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizQueryServiceClient(cc grpc.ClientConnInterface) QuizQueryServiceClient {
	return &quizQueryServiceClient{cc}
}

func (c *quizQueryServiceClient) GetQuestionDetail(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*GetQuestionRes, error) {
	out := new(GetQuestionRes)
	err := c.cc.Invoke(ctx, "/ququiz.lintang.quiz_query.pc.QuizQueryService/GetQuestionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizQueryServiceClient) GetQuizParticipants(ctx context.Context, in *GetQuizParticipantsReq, opts ...grpc.CallOption) (*GetQuizParticipantRes, error) {
	out := new(GetQuizParticipantRes)
	err := c.cc.Invoke(ctx, "/ququiz.lintang.quiz_query.pc.QuizQueryService/GetQuizParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizQueryServiceServer is the server API for QuizQueryService service.
// All implementations must embed UnimplementedQuizQueryServiceServer
// for forward compatibility
type QuizQueryServiceServer interface {
	GetQuestionDetail(context.Context, *GetQuestionReq) (*GetQuestionRes, error)
	GetQuizParticipants(context.Context, *GetQuizParticipantsReq) (*GetQuizParticipantRes, error)
	mustEmbedUnimplementedQuizQueryServiceServer()
}

// UnimplementedQuizQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuizQueryServiceServer struct {
}

func (UnimplementedQuizQueryServiceServer) GetQuestionDetail(context.Context, *GetQuestionReq) (*GetQuestionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionDetail not implemented")
}
func (UnimplementedQuizQueryServiceServer) GetQuizParticipants(context.Context, *GetQuizParticipantsReq) (*GetQuizParticipantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizParticipants not implemented")
}
func (UnimplementedQuizQueryServiceServer) mustEmbedUnimplementedQuizQueryServiceServer() {}

// UnsafeQuizQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizQueryServiceServer will
// result in compilation errors.
type UnsafeQuizQueryServiceServer interface {
	mustEmbedUnimplementedQuizQueryServiceServer()
}

func RegisterQuizQueryServiceServer(s grpc.ServiceRegistrar, srv QuizQueryServiceServer) {
	s.RegisterService(&QuizQueryService_ServiceDesc, srv)
}

func _QuizQueryService_GetQuestionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizQueryServiceServer).GetQuestionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ququiz.lintang.quiz_query.pc.QuizQueryService/GetQuestionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizQueryServiceServer).GetQuestionDetail(ctx, req.(*GetQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizQueryService_GetQuizParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizParticipantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizQueryServiceServer).GetQuizParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ququiz.lintang.quiz_query.pc.QuizQueryService/GetQuizParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizQueryServiceServer).GetQuizParticipants(ctx, req.(*GetQuizParticipantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizQueryService_ServiceDesc is the grpc.ServiceDesc for QuizQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ququiz.lintang.quiz_query.pc.QuizQueryService",
	HandlerType: (*QuizQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestionDetail",
			Handler:    _QuizQueryService_GetQuestionDetail_Handler,
		},
		{
			MethodName: "GetQuizParticipants",
			Handler:    _QuizQueryService_GetQuizParticipants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz_grpc.proto",
}
